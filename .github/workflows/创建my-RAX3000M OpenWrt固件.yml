#=================================================
# 自动构建 OpenWrt RAX3000M
# https://github.com/ytalm/OpenWrt-RAX3000M
# Description: Build OpenWrt using GitHub Actions
# Lisence: This is free software, licensed under the MIT License
# Author: flyheart
# 感谢p3terx大神的一键编译脚本
# https://github.com/P3TERX/Actions-OpenWrt
# Blog: https://p3terx.com
#=================================================
#
#修改以下代码或者开启触发开关都好，要严格按格式对好,前面有多少空格也要看清楚
#代码里有 name: 后面的内容随便改,冒号后面是有个空格的,如果修改固件名字就要考虑能不能显示出你想要的

name: 创建my-RAX3000M OpenWrt固件

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Tempoary_IP:
        description: '固件 IP 地址 [可选]'
        default: ''
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

#release发布触发开始编译(只是一个触发条件,不会发布的,又麻烦,没卵用,不用研究) 
      release:
        description: 'Release firmware'
        required: false
        default: 'false'
#编辑任意指定文件触发开始编译(去掉下面5个#开启,最下面一行是指定修改什么文件就触发编译,我现在是修改mod.config文件触发)  
  push:                               # push 操作
    branches:                         # 分支
      - master                        # 主分支

#定时触发开始编译(开启定时编译请先关闭SSH,要不然SSH没人管,会卡SSH编译失败)
  schedule:                           # 时间表
    - cron: 0 4 28 * *                 # 每月28日国际时间4点，北京时间中午12点执行(北京+8)
#          分 时 日 月 周5  
#点☆Star触发开始编译  
  watch:                              # 监视操作
    types: started                    # 点击 star 之后

### 环境变量设置

env:
  # REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x           #编译固件源码链接（请勿修改）
  REPO_URL: https://github.com/zikura88/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02                                #源码链接的分支（请勿修改）
  FEEDS_CONF: feeds.conf.default               
  CONFIG_FILE: my.config                            #配置文件（可SSH远程定制固件插件，也可在本地提取配置粘贴到此文件）
  DIY_P1_SH: diy-part1.sh                            #自定义执行文件
  DIY_P2_SH: diy-part2.sh                            #自定义执行文件
  UPLOAD_BIN_DIR: true                               #上传【bin文件夹】到github空间（true=开启）（false=关闭）
  UPLOAD_FIRMWARE: false                              #上传固件到github空间（true=开启）（false=关闭）
  UPLOAD_COWTRANSFER: false                          #上传固件到到【奶牛快传】（true=开启）（false=关闭）   
  UPLOAD_WETRANSFER: false                             #上传固件到到【WETRANSFER】（true=开启）（false=关闭）
  UPLOAD_RELEASE: false                              # 上传固件到 Github Releases
  DELETE_OLD_WORKFLOW: false                          # 删除早期的 workflow 任务
  DELETE_OLD_RELEASE: true                           # 删除早期的 Releases 任务
  TZ: Asia/Shanghai                                  #时区 亚洲/上海
  DEVICE: rax3000m
  UPLOAD_OUTPUT: true
### 结束

  
 
jobs:
   _rax3000m:
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
    - name: 配置
      uses: actions/checkout@master
      
    - name: 检查服务器配置
      if: (!cancelled())
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL,E5系列"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th
    
    - name: 配置环境
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack neofetch antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev 
      
    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: 配置 Feeds
      run: |
        cd openwrt
        echo "src-git 281677160 https://github.com/281677160/openwrt-package" >> ./feeds.conf.default
        echo "src-git haiibo https://github.com/haiibo/openwrt-packages" >> ./feeds.conf.default
        echo "src-git OpenClash https://github.com/vernesong/OpenClash.git" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f $GITHUB_WORKSPACE/my.config $GITHUB_WORKSPACE/openwrt/.config
      
    - name: 修改 Lan IP(修改后面的IP）
      run: |
        cd openwrt
        sed -i 's/172.16.10.1/172.16.10.1/g' package/base-files/files/bin/config_generate
        neofetch

    - name: 修改 主机名称
      run: |
        cd openwrt
        sed -i 's/ImmortalWrt/RAX3000M/g' package/base-files/files/bin/config_generate
        neofetch

    - name: 下载依赖
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      run: |
        cd openwrt
        make -j$(nproc)
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name : 上传输出文件
      uses: actions/upload-artifact@master
      if: env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: ${{ env.DEVICE }}--${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: 整理输出文件
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
    
    - name: 发布固件至 Release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.DEVICE }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: |
          # 未测试×
          
          IP: 172.16.10.1 | Password: none
